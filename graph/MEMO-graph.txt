
그래프 G (Graph)

 - G = (V,E)

    V: 정점(vertex)들의 집합    cf. 노드 (node)
    E: 간선(edge)들의 집합      cf. 링크 (link)

무방향 그래프(undirecte graph) vs. 방향 그래프(directed graph)


가중치 그래프 (weighted graph)
 - 네트워크(network)
 - 간선에 가중치를 붙인 그래프


부분그래프 (subgraph)
 - G1=(V1,E1)이 G2=(V2,E2)의 부분 그래프
    V1 \subseteq V2 이고  E1 \subseteq E2

인접 정점 (adjacent vertex)
 - 하나의 정점에서 간선으로 연결된 정점!!

정점의 차수
 - 정점과 연결된 간선의 수 

그래프의 차수(degree)

 - 무방향 그래프의 차수
     : 무방향 그래프의 정점의 차수 중 최대 차수 

 - 방향 그래프의 차수 
     : 진입 차수(in-degree): 외부에서 들어오는 간선의 수
     : 진출 차수(out-degree): 외부로 향하는 간선의 수

경로(path)

 - 정점의 나열: v1, v2, ... , vk  (vi -> vi+1 간선이 존재)

 - 단순 경로(simple path): 경로! 반복되는 간선이 없는 경로!

 - 사이클(cycle): 경로! 시작 정점과 종료 정점이 동일한 경로! (v1 = vk)
    
연결 그래프(connected graph)
 - 모든 두 정점의 경로가 존재

완전 그래프(complete graph)
 - 모든 두 정점의 간선이 존재

=================================================================


그래프를 표현하는 방법

 (1) 인접 행렬(adjacent matrix) 표현 방법

 (2) 인접 리스트(adjacent list) 표현 방법

 cf. G = (V, E) 정점들의 집합과 간선들의 집합



탐색 방법
 - dfs(depth-first search) 깊이 우선 탐색   (스택)
 - bfs(breadth-first search) 너비 우선 탐색 (큐)


dfs 알고리즘 (재귀 버전)

  dfs(g, v0)
   입력: 그래프, 현재 방문 노드
   출력: dfs 순서로 방문한 노드들
   절차:

      1. v0를 방문 (출력)
      2. v0의 각 이웃 정점 v에 대하여 아래 절차를 실행
         2.1 v를 이미 방문했다면 skip
	 2.2 v를 아직 방문하지 않았다면 dfs(g, v)

dfs 알고리즘 (명시적으로 스택을 사용하는 버전)


