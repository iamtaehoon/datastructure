

트리(tree)

 - 트리의 정의는 그래프를 배울 때 다시 합니다.
 - 노드, 루트, 서브트리
 - 단말노드(terminal node), 비단말노드(non-terminal node)
 - 레벨(level) : 문헌마다 정의가 조금씩 차이가 있음
 - 높이(height)
 - 차수(degree)

이진트리(binary tree)
 - 포화이진트리(full binary tree)
 - 완전이진트리(complete binary tree)
 - 일반 이진 트리

이진트리를 프로그램(자료형)으로 표현하는 방법
 - 배열 ===> 9장 우선순위 큐에서도 활용됨
 - 구조체(포인터)

* 박상현

//  +----+-------+----+
//  |  l | data  | r  |
//  +----+-------+----+

// 구조체 자료형: 트리 노드 
typedef struct TreeNode {
  struct TreeNode* left;
  DATATYPE data;
  struct TreeNode* right;
} TreeNode;

이진트리의 순회(traversal)
 - 전위순회(preorder traversal)  : 부모 노드 먼저 
 - 중위순회(inorder traversal)
   : 왼쪽 자식노드(로 시작되는 서브트리)->부모 노드->오른쪽 자식노드(로 시작되는 서브트리)
 - 후위순회(postorder traversal) : 자식 노드(로 시작되는 서브트리) 먼저


트리의 연산
 - 트리의 노드 구하기 : get_node_count()
 - 트리의 높이 구하기 : get_height()
 - 트리의 단말노드(noterminal node, leaf)구하기 : get_leaf_node()

(매우 중요!!)


이진탐색트리(binary search tree)

 - 정의:
     모든 노드를 기준으로 왼쪽 서브트리의 노드들보다 <=이고,
                       오른쪽 서브트리의 노드들보다 >=이고,
		       
 - 탐색 (노드 개수가 n)
    : 최상의 경우 log n번 비교
    : 최악의 경우 n번 비교


 - 이진탐색트리에 새로운 노드를 추가

   알고리즘 insert(root, n)

    입력: 이진탐색트리 root, 새 노드 n (= (NULL, v, NULL) )
    출력: 새로운 이진탐색트리
    절차:
          1. if root->data == n then return
	  2. if n < root->data  then
	     2-1 if root->left == NULL
	             root->left = n
		     return
		     
             2-2 if root->left != NULL
		     insert(root->left, n)
		     
          3. if root->data < n then
             3-1 if root->right == NULL
	             root->right = n
		     return
		     
             3-2 if root->right != NULL
		     insert(root->right, n)


 - 이진탐색트리에 기존의 노드를 삭제

   알고리즘 delete(root, key)     

    입력: 이진탐색트리 root, key     cf. n: (left, key, right)
    출력: key의 노드가 삭제된 이진탐색트리
    절차:
   
      1. if root == NULL then return root;
      
      2. if root != NULL then
        2-1. if key < root->key then
                root->left  =  delete(root->left, key)
		return root
		
	2-2. if key > root->key then
	        root->right =  delete(root->right, key)
		return root
		
        2-3  if key == root->key then
	  // case1 : root가 단말노드이면 
	  2-3-1 if root->left == NULL && root->right == NULL then
	           return NULL

	  // case2 : root의 child subtree가 1개이면 (right subtree)
	  2-3-2 if root->left == NULL && root->right != NULL then
	           return root->right

	  // case2 : root의 child subtree가 1개이면 (left subtree)
	  2-3-3 if root->left != NULL && root->right == NULL then
                   return root->left

	  // case3 : root의 child subtree가 2개이면
          2-3-4 if root->left != NULL && root->right != NULL then
	           min = min_from_right_subtree ( root->right )
		   root->key = min
                   root->right = delete( root->right, min )
		   return root

Q. min_from_right_subtree의 알고리즘을 작성해보시오.

======================================================================

우선순위 큐(Priority Queue)

 - 힙(heap)
   (1) 완전이진트리 (complete binary tree)
   (2) Value(부모) >= Value(자식)

   cf. 이진탐색트리(binary search tree)와 다른 점 반드시 잘 이해하세요!

 - Max heap, Min heap
   ==> 교재: Max heap을 가정

 - 힙을 배열로 표현하는 방법
    첨자 1: 루트 노드를 저장
    첨자 i: 어떤 노드가 저장되어 있다고 가정하면
     ==> 첨자 i*2 : 그 노드의 왼쪽 자식
        첨자 i*2+1 : 그 노드의 오른쪽 자식

 -힙에 새로운 원소를 insert하는 알고리즘의 의사 코드 (Pseudo code)

알고리즘 insert_max_heap
  
  입력: heap_arr  => 배열로 표현된 힙!
       heap_size => 힙의 크기 (맨 마지막 원소의 첨자)
       key       => 새로운 원소!
       
  출력: heap_arr  => 새로운 원소가 추가된 힙
       heap_size => 새로운 힙의 크기

  절차: 

     1. heap_size <- heap_size + 1
     2. i <- heap_size
        heap_arr[i] <- key

     3. heap_arr[ i ] >  heap_arr[ PARENT(i) ] 조건이 만족하면 반복

       3.1   heap_arr[ i ] <---> heap_arr[ PARENT(i) ]
       3.2   i <- PARENT(i) 

  cf. PARENT(i) = i/2   !!  정수 나눗셈은 소수점은 버려집니다(truncate)!


  Q. 교재 알고리즘하고 비교해서 위 알고리즘에서 고려하지 않은 case가 있습니다.
     그 case까지 고려하면 위 알고리즘을 어떻게 수정해야할까요?

     Hint: 3번 스텝!


알고리즘 delete_max_heap

  입력: heap_arr  => 배열로 표현된 힙!
       heap_size => 힙의 크기 (맨 마지막 원소의 첨자)
       
  출력: heap_arr  => 원소가 삭제된 힙
       heap_size => 새로운 힙의 줄어든 크기
       item      => 삭제된 원소(가장 우선순위가 높은 원소)

  절차: 

    1. item <- heap_arr[ 1 ]    // 힙이 비어있지 않다는 가정
    
    2. heap_arr[ 1 ] <- heap_arr[ heap_size ]
       heap_size <- heap_size - 1
       i <- 1
       
    3. 아래 과정을 반복 

      3-1. 만일 heap_arr[i] >= heap_arr[i*2]이고
               heap_arr[i] >= heap_arr[i*2+1]면  반복 과정을 종료
	       
      3-2. 만일 heap_arr[i] < heap_arr[i*2]이고  // 왼쪽 자식이 더 크다
               heap_arr[i] >= heap_arr[i*2+1]면

           3-2-1. heap_arr[i]  <---> heap_arr[i*2]  //왼쪽으로 이동
	          i <- i*2 

        
      3-3. 만일 heap_arr[i] > heap_arr[i*2]이고 // 오른쪽 자식이 더 크다
               heap_arr[i] <= heap_arr[i*2+1]면

           3-2-1. heap_arr[i]  <---> heap_arr[i*2+1]  //오른쪽으로 이동
	          i <- i*2 + 1 

  Q. 교재 알고리즘하고 비교해서 위 알고리즘에서 고려하지 않은 case가 있습니다.
     그 case까지 고려하면 위 알고리즘을 어떻게 수정해야할까요?

     Hint: 3번 스텝!




허프만 트리

 - 텍스트 문자 -> 아스키 코드. 빈도수와 무관하게 모두 8비트 (7비트)
   문자 수 x 8 = 텍스트가 차지하는 비트수

 - 빈도 수가 많이 나오는 상대적으로 적은 비트수로 표현하고
   빈도 수가 적게 나오는 상대적으로 많은 비트수로 표현할 수 있다면
   전체 텍스트가 차지하는 비트 수가 줄어들 것이다.
   ==> 텍스트 압축!!

 - 허프만 인코딩 방법!

 - 자세한 알고리즘은 교재 참고

 Q 허프만 인코딩 방법에서 힙은 어떤 쓰임새가 있을까?



